(require 2htdp/image)
(require 2htdp/universe)
(define ALIEN-IMG .)
(define ROCKET-IMG1 .)
(define ROCKET-IMG2 (rotate 90 ROCKET-IMG1))
(define ROCKET-IMG3 (rotate 180 ROCKET-IMG1))
(define ROCKET-IMG4 (rotate 270 ROCKET-IMG1))
(define HEIGHT 500)
(define (height t)
  (- 500 (* 3 t)))
(define WIDTH 800)
(define ROCKET (/ WIDTH 2))
(define CLOSE 350)
(define ROCKET-X (/ WIDTH 2))
(define ROCKET-Y (- HEIGHT (/ (image-height ROCKET-IMG1) 2)))
(define ROCKET-DELTA-X 5)
(define ALIEN-DELTA-X 4)
(define ALIEN-DELTA-Y 8)
(define MESSAGE-X (* 0.75 WIDTH))
(define MESSAGE-Y 100)
(define RIGHT-EDGE (- (sub1 WIDTH) (/ (image-width ROCKET-IMG1) 2)))
(define LEFT-EDGE (/ (image-width ROCKET-IMG1) 2))
(define APPROACHING (text "approaching..." 24 "red"))
(define CLOSING-IN (text "Closing in..." 24 "blue"))
(define LANDED (text "Landed!" 24 "green"))
(define r1 "up")
(define w r1)
(define SHOT1 (make-posn 50 50))
(define SHOT2 false)
(define SHOT-DELTA-Y 3)
(define SHOT-IMG .)
(define SHOT-START-Y (- (sub1 HEIGHT) (image-height ROCKET-IMG1)))
(define ALIEN-WIDTH (image-width ALIEN-IMG))
(define ALIEN-HEIGHT (image-height ALIEN-IMG))
(define ALIEN (make-posn (/ WIDTH 2) (/ HEIGHT 2)))
(define (main n)
  (big-bang
    INIT-WORLD
    (on-draw draw-world)
    (on-key process-key)
    (on-tick create-new-world)
    (stop-when game-over?)
    (name n)))


(define (f-on-world a-world)
  (cond ((and (>= a-world 0) (< a-world CLOSE)) ...)
        ((and (>= a-world CLOSE) (<= a-world HEIGHT)) ...)
        (else ...)))
(define (draw-world a-world)
  (cond ((and (>= a-world 0) (< a-world CLOSE))
         (place-image APPROACHING
                      MESSAGE-X
                      MESSAGE-Y
                      (draw-rocket a-world E-SCENE)))
        ((and (>= a-world CLOSE) (<= a-world HEIGHT))
         (place-image CLOSING-IN
                      MESSAGE-X
                      MESSAGE-Y
                      (draw-rocket a-world E-SCENE)))
        (else
         (place-image LANDED
                      MESSAGE-X
                      MESSAGE-Y
                      (draw-rocket a-world E-SCENE)))))
  
  ;(draw-rocket a-world E-SCENE))
(define E-SCENE
  (place-image (rectangle (* 2 WIDTH) (* 2 HEIGHT) 'solid 'yellow)
               0
               0
               (empty-scene WIDTH HEIGHT)))
(define (draw-rocket a-rocket scn)
  (cond ((string=? a-rocket "up")
         (place-image ROCKET-IMG1 ROCKET-X ROCKET-Y E-SCENE))
        ((string=? a-rocket "left")
         (place-image ROCKET-IMG2 ROCKET-X ROCKET-Y E-SCENE))
        ((string=? a-rocket "down")
         (place-image ROCKET-IMG3 ROCKET-X ROCKET-Y E-SCENE))
        (else
         (place-image ROCKET-IMG4 ROCKET-X ROCKET-Y E-SCENE))))
  ;(place-image ROCKET-IMG1 a-rocket ROCKET-Y scn))


(define (move-rocket a-rocket direction)
  (cond ((and (string=? direction "right")
              (<= (+ a-rocket ROCKET-DELTA-X) (sub1 WIDTH)))
         (+ a-rocket ROCKET-DELTA-X))
        ((and (string=? direction "left")
              (>= (- a-rocket ROCKET-DELTA-X) 0))
         (- a-rocket ROCKET-DELTA-X))
        (else a-rocket)))
(define (update-world w) (add1 w))
(define (rocket-landed? w)
  (> w (add1 HEIGHT)))
(check-expect (move-rocket ROCKET "right")(+ ROCKET ROCKET-DELTA-X))

(define (distance-to-origin a-posn)
  (sqrt (+ (sqr (posn-x a-posn))
           (sqr (posn-y a-posn)))))
(check-expect (distance-to-origin (make-posn 3 4)) 5)
;(animate create-rocket-scene)
(define (f-on-alien an-alien)...)
(define INIT-DIR "right")
(define-struct world (rocket alien dir shot))
(define INIT-WORLD (make-world ROCKET-IMG1 ALIEN-IMG INIT-DIR false))
;(define (draw-world1 w)...)
(define (f-on-world1 a-world)
    (draw-alien (world-alien w)
                (draw-rocket (world-rocket w) E-SCENE)))
(define (draw-alien a scn)
  (place-image ALIEN-IMG (posn-x a) (posn-y a) scn))
(define (create-new-world a-world)
  (make-world
   (world-rocket a-world)
   (move-alien (world-alien a-world) (world-dir a-world))
   (compute-next-direction (move-alien (world-alien a-world) (world-dir a-world))
                           (world-dir a-world))
   (move-shot (world-shot a-world))))

(define (move-alien an-alien dir)
  (cond ((string=? dir "right")
         (make-posn (+ (posn-x an-alien) ALIEN-DELTA-X)
                    (posn-y an-alien)))
        ((string=? dir "left")
         (make-posn (- (posn-x an-alien) ALIEN-DELTA-X)
                    (posn-y an-alien)))
        (else (make-posn (posn-x an-alien)
                         (+ (posn-y an-alien) ALIEN-DELTA-Y)))))
         
(define (computer-new-direction a dir)...)
(define (compute-next-direction a dir)
  (cond ((or (and (string=? dir "right") (alien-at-right-edge? a))
             (and (string=? dir "left") (alien-at-left-edge? a)))
         "down")
        ((and (string=? dir "down") (alien-at-right-edge? a)) "left")
        ((and (string=? dir "down") (alien-at-left-edge? a)) "right")
        (else dir)))

(define (alien-at-right-edge? an-alien)
  (>= (+ (posn-x an-alien) ALIEN-DELTA-X) RIGHT-EDGE))
(define (alien-at-left-edge? a)
  (<= (- (posn-x a) ALIEN-DELTA-X) LEFT-EDGE))
(define (game-over? a-world)
  (or (alien-reached-earth? (world-alien a-world))
      (alien-hit? (world-alien a-world) (world-shot a-world))))

(define (alien-reached-earth? an-alien)
  (>= (posn-y an-alien)
      (- (sub1 HEIGHT) (/ (image-height ALIEN-IMG) 2))))
;(check-expect (game-over? (make-world ROCKET
 ;                                     (make-posn 200
  ;                                               (sub1 HEIGHT))
   ;                                   "right")) #t)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (f-on-shot a-shot)
  (cond ((false? a-shot)...)
        (else ...)))
(define (run-game n)
  (big-bang INIT-WORLD
    (on-draw draw-world)
    (on-key process-key)
    (on-tick create-new-world)
    (stop-when game-over?)
    (name n)))
(define (draw-world2 a-world)
  (draw-shot (world-shot a-world)
             (draw-alien (world-alien a-world)
                         (draw-rocket (world-rocket a-world) E-SCENE))))
(define (process-key a-world k)
  (cond ((key=? k "up")
         (make-world (world-rocket a-world)
                     (world-alien a-world)
                     (world-dir a-world)
                     (compute-shot (world-shot w) (world-rocket a-world))))
        (else (make-world (move-rocket (world-rocket a-world) k)
              (world-alien a-world)
              (world-dir a-world)
              (world-shot a-world)))))
(define (draw-shot a-shot scn)
  (cond ((false? a-shot) scn)
        (else (place-image SHOT-IMG (posn-x a-shot) (posn-y a-shot) scn))))
(define (compute-shot a-shot a-rocket)
  (cond ((false? a-shot) (make-posn a-rocket SHOT-START-Y))
        (else a-shot)))
(define (move-shot a-shot)
  (cond ((false? a-shot) #f)
        ((< (- (posn-y a-shot) SHOT-DELTA-Y) 0) #f)
        (else (make-posn (posn-x a-shot) (- (posn-y a-shot) SHOT-DELTA-Y)))))
(define (alien-hit? an-alien a-shot)
  (cond ((false? a-shot) #f)
        (else (and (<= (abs (- (posn-x a-shot) (posn-x an-alien)))
                       (/ ALIEN-WIDTH 2))
                   (<= (abs (- (posn-y a-shot) (posn-y an-alien)))
                       (/ ALIEN-WIDTH 2))))))
(check-expect (alien-hit? ALIEN SHOT2) #f)
(check-expect (alien-hit? ALIEN (make-posn 395 246)) #t)
(check-expect (alien-hit? ALIEN SHOT1) #f)
